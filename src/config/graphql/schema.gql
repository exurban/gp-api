# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

# Inputs to create a new Collection entity.
input AddCollectionInput {
  # A vignette used to introduce the collection.
  description: String
  id: Float

  # Name of the collection. Used in Photo Info links.
  name: String!
}

type AddCollectionResponse {
  message: String!
  newCollection: Collection
  success: Boolean!
}

input AddFrameInput {
  basePrice: Float!
  color: String!
  cost: Float!
  description: String
  dimension1: Float!
  dimension2: Float!
  displayName: String!
  frameSku: String!
  id: Float
  material: String!
  priceModifier: Float!
  printType: String!
  productImageId: Float
  sortIndex: Float!
}

type AddFrameResponse {
  message: String!
  newFrame: Frame
  success: Boolean!
}

# Inputs to create a new Location entity.
input AddLocationInput {
  # A vignette used to introduce the location.
  description: String
  id: Float

  # Name of the location. Used in Photo Info links.
  name: String!
  sortIndex: Float!

  # An optional string that can be used to refer to the location.
  tag: String
}

type AddLocationResponse {
  message: String!
  newLocation: Location
  success: Boolean!
}

input AddMatInput {
  basePrice: Float!
  color: String!
  cost: Float!
  description: String
  dimension1: Float!
  dimension2: Float!
  displayName: String!
  id: Float
  matSku: String!
  name: String!
  priceModifier: Float!
  printType: String!
  productImageId: Float
  shippingCost: Float!
}

type AddMatResponse {
  message: String!
  newMat: Mat
  success: Boolean!
}

input AddPhotoImageInput {
  altText: String = "new image"
  fileExtension: String = "XL"
  height: Int = 0
  imageName: String = "New Image"
  jpegUrl: String = ""
  size: String = "XL"
  webpUrl: String = ""
  width: Int = 0
}

type AddPhotoImageResponse {
  message: String!
  newPhotoImage: PhotoImage
  success: Boolean!
}

input AddPhotoInput {
  basePrice12: Float = 120
  basePrice16: Float = 140
  basePrice20: Float = 175
  basePrice24: Float = 230
  basePrice30: Float = 275
  collectionIds: [Int!]
  description: String = "No description provided."
  id: Float
  isFeatured: Boolean = false
  isLimitedEdition: Boolean = false
  locationId: Int
  photoImageId: Int
  photographerId: Int
  priceModifier12: Float = 1
  priceModifier16: Float = 1
  priceModifier20: Float = 1
  priceModifier24: Float = 1
  priceModifier30: Float = 1
  rating: Int = 5
  shareImageId: Int
  subjectIds: [Int!]
  tagIds: [Int!]
  title: String = "Untitled"
}

type AddPhotoResponse {
  message: String!
  newPhoto: Photo
  success: Boolean!
}

type AddPhotoToFavoritesResponse {
  addedPhotoWithId: ID
  message: String!
  success: Boolean!
}

# Inputs to create a new Photographer entity.
input AddPhotographerInput {
  # Short biography for Photographer. Displayed at the top of the Photographer's photo gallery.
  bio: String!

  # id for cover image.
  coverImageId: Int

  # Photographer's email address.
  email: String!

  # Photographer's first name.
  firstName: String!
  id: Float

  # Photographer's last name.
  lastName: String!

  # Photographer's full name.
  name: String!
}

type AddPhotographerResponse {
  message: String!
  newPhotographer: Photographer
  success: Boolean!
}

input AddPrintInput {
  basePrice: Float!
  cost: Float!
  description: String
  dimension1: Float!
  dimension2: Float!
  displayName: String!
  id: Float
  priceModifier: Float!
  printSku: String!
  shippingCost: Float!
  type: String!
}

type AddPrintResponse {
  message: String!
  newPrint: Print
  success: Boolean!
}

input AddProductImageInput {
  altText: String = "new image"
  fileExtension: String = "XL"
  height: Int = 0
  imageName: String = "New Image"
  imageUrl: String = ""
  size: String = "XL"
  width: Int = 0
}

type AddProductImageResponse {
  message: String!
  newProductImage: ProductImage
  success: Boolean!
}

input AddProductInput {
  frameId: Int
  matId: Int
  photoId: Int!
  printId: Int!
}

type AddProductResponse {
  message: String!
  newProduct: Product
  success: Boolean!
}

type AddProductToShoppingBagResponse {
  addedProduct: Product
  message: String!
  success: Boolean!
}

input AddShareImageInput {
  altText: String = "new image"
  fileExtension: String = "XL"
  height: Int = 0
  id: Float
  imageName: String = "New Image"
  imageUrl: String = ""
  size: String = "XL"
  width: Int = 0
}

type AddShareImageResponse {
  message: String!
  newShareImage: ShareImage
  success: Boolean!
}

# Inputs to create a new Subject entity.
input AddSubjectInput {
  # A cover image to be displayed next to the opening vignette.
  coverImageId: Int

  # A vignette used to introduce the subject.
  description: String
  id: Float

  # Name of the subject. Used in Photo Info links.
  name: String!
}

type AddSubjectResponse {
  message: String!
  newSubject: Subject
  success: Boolean!
}

# Inputs to create a new Tag entity.
input AddTagInput {
  # A vignette used to introduce the tag.
  description: String
  id: Float

  # Name of the tag. Used in Photo Info links.
  name: String!
}

type AddTagResponse {
  message: String!
  newTag: Tag
  success: Boolean!
}

type Address {
  city: String!
  country: String!
  createdAt: DateTime!
  id: ID!
  line1: String!
  line2: String!
  orders: [Order!]!
  postalCode: String!
  state: String!
  updatedAt: DateTime!
}

type AllFeaturedPhotosResponse {
  photos: [Photo!]!
  total: Int!
}

input AllPhotosAtLocationInput {
  id: Float
  name: String
  tag: String
}

type AllPhotosAtLocationResponse {
  locationInfo: Location!
  photos: [Photo!]!
  total: Int!
}

input AllPhotosByPhotographerInput {
  id: Float
  name: String
}

type AllPhotosByPhotographerResponse {
  photographerInfo: Photographer!
  photos: [Photo!]!
  total: Int!
}

input AllPhotosInCollectionInput {
  name: String!
}

type AllPhotosInCollectionResponse {
  collectionInfo: Collection!
  photos: [Photo!]!
  total: Int!
}

input AllPhotosOfSubjectInput {
  name: String!
}

type AllPhotosOfSubjectResponse {
  message: String!
  photos: [Photo!]!
  subjectInfo: Subject
  success: Boolean!
  total: Int!
}

input AllPhotosWithTagInput {
  name: String!
}

type AllPhotosWithTagResponse {
  photos: [Photo!]!
  tagInfo: Tag!
  total: Int!
}

type Collection {
  # Count of photos in the collection.
  countOfPhotos: Int!
  createdAt: DateTime!
  description: String!
  id: ID!
  name: String!
  photosInCollection: [PhotoCollection!]
  tag: String!
  updatedAt: DateTime!
}

input CollectionSearchSortInput {
  direction: SortDirection = ASC
  filter: String
  orderBy: String = "name"
}

type CollectionSelectionOption {
  id: Int!
  name: String!
}

type CollectionsResponse {
  collections: [Collection!]!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type FavoritesResponse {
  # Returns list of Photo objects in user's favorites.
  photoList: [Photo!]
}

type FinishOptions {
  frames: [Frame!]!
  mats: [Mat!]!
  prints: [Print!]!
}

type Frame {
  aspectRatio: String!
  basePrice: Float!
  color: String!
  cost: Float!
  createdAt: DateTime!
  description: String
  dimension1: Float!
  dimension2: Float!
  displayName: String!
  frameSku: String!
  id: ID!
  material: String!
  priceModifier: Float!
  printType: String!

  # Optional. An image of the frame.
  productImage: ProductImage
  products: [Product!]
  retailPrice: Float!
  sortIndex: Float!
  updatedAt: DateTime!
}

input GetApiTokenInput {
  email: String!
  userId: Float!
}

type Location {
  # Count of photos taken at the location on the site.
  countOfPhotos: Int!
  createdAt: DateTime!

  # A description of the location, used as a vignette at the top of the Location's photos page.
  description: String!

  # The ID of the location. It is unique, numeric and automatically-generated.
  id: ID!

  # The name of the Location. It is required and must be unique.
  name: String!

  # Nullable. An array of photos taken at the Location.
  photos: [Photo!]

  # A tag for the Location. It is required and must be unique.
  tag: String!
  updatedAt: DateTime!
}

input LocationSearchSortInput {
  direction: SortDirection = ASC
  filter: String
  orderBy: String = "name"
}

type LocationSelectionOption {
  id: Int!
  name: String!
}

type LocationsResponse {
  locations: [Location!]!
}

type Mat {
  aspectRatio: String!
  basePrice: Float!
  color: String!
  cost: Float!
  createdAt: DateTime!
  description: String
  dimension1: Float!
  dimension2: Float!
  displayName: String!
  id: ID!
  matSku: String!
  priceModifier: Float!
  printType: String!
  productImage: ProductImage
  products: [Product!]
  retailPrice: Float!
  sortIndex: Int!
  updatedAt: DateTime!
}

input MatsInput {
  dimension1: String!
  dimension2: String!
  printType: String!
}

type MatsResponse {
  mats: [Mat!]
  message: String!
  success: Boolean!
}

type Mutation {
  addCollection(input: AddCollectionInput!): AddCollectionResponse!
  addFrame(input: AddFrameInput!): AddFrameResponse!
  addImage(input: AddProductImageInput!): AddProductImageResponse!
  addLocation(input: AddLocationInput!): AddLocationResponse!
  addMat(input: AddMatInput!): AddMatResponse!
  addPhoto(input: AddPhotoInput!): AddPhotoResponse!
  addPhotoImage(input: AddShareImageInput!): AddShareImageResponse!
  addPhotoToFavorites(photoId: Float!): AddPhotoToFavoritesResponse!
  addPhotographer(input: AddPhotographerInput!): AddPhotographerResponse!
  addPrint(input: AddPrintInput!): AddPrintResponse!
  addProduct(input: AddProductInput!): AddProductResponse!
  addProductImageToFrame(frameId: Int!, productImageId: Int!): addProductImageToFrameResponse!
  addProductImageToMat(matId: Int!, productImageId: Int!): addProductImageToMatResponse!
  addProductToShoppingBag(productId: Float!): AddProductToShoppingBagResponse!
  addSubject(input: AddSubjectInput!): AddSubjectResponse!
  addTag(input: AddTagInput!): AddTagResponse!
  deleteCollection(id: Int!): Boolean!
  deleteFrame(id: Int!): Boolean!
  deleteLocation(id: Int!): Boolean!
  deleteMat(id: Int!): Boolean!
  deletePhoto(id: Int!): Boolean!
  deletePhotoImage(id: Int!): Boolean!
  deletePhotographer(id: Int!): Boolean!
  deletePrint(id: Int!): Boolean!
  deleteProduct(id: Int!): SuccessMessageResponse!
  deleteProductImage(id: Int!): Boolean!
  deleteShareImage(id: Int!): Boolean!
  deleteSubject(id: Int!): Boolean!
  deleteTag(id: Int!): Boolean!
  getApiToken(input: GetApiTokenInput!): String!
  removePhotoFromFavorites(photoId: Float!): RemovePhotoFromFavoritesResponse!
  removeProductFromShoppingBag(productId: Float!): SuccessMessageResponse!
  updateCollection(id: Int!, input: UpdateCollectionInput!): UpdateCollectionResponse!
  updateCollectionsFromCsv: UpdateCollectionsFromCsvResponse!
  updateFrame(id: Int!, input: UpdateFrameInput!): UpdateFrameResponse!
  updateFramesFromCsv: UpdateFramesFromCsvResponse!
  updateLocation(id: Int!, input: UpdateLocationInput!): UpdateLocationResponse!
  updateLocationsFromCsv: UpdateLocationsFromCsvResponse!
  updateMat(id: Int!, input: UpdateMatInput!): UpdateMatResponse!
  updateMatsFromCsv: UpdateMatsFromCsvResponse!
  updatePhoto(id: Int!, input: UpdatePhotoInput!): UpdatePhotoResponse!
  updatePhotoImage(id: Int!, input: UpdatePhotoImageInput!): UpdatePhotoImageResponse!
  updatePhotoImagesFromCsv: UpdatePhotoImagesFromCsvResponse!
  updatePhotographer(id: Int!, input: UpdatePhotographerInput!): UpdatePhotographerResponse!
  updatePhotographersFromCsv: UpdatePhotographersFromCsvResponse!
  updatePhotosFromCsv: UpdatePhotosFromCsvResponse!
  updatePrint(id: Int!, input: UpdatePrintInput!): UpdatePrintResponse!
  updatePrintsFromCsv: UpdatePrintsFromCsvResponse!
  updateProduct(id: Int!, input: UpdateProductInput!): UpdateProductResponse!
  updateProductImage(id: Int!, input: UpdateProductImageInput!): UpdateProductImageResponse!
  updateProductImagesFromCsv: UpdateProductImagesFromCsvResponse!
  updateShareImage(id: Int!, input: UpdateShareImageInput!): UpdateShareImageResponse!
  updateShareImagesFromCsv: UpdateShareImagesFromCsvResponse!
  updateSubject(id: Int!, input: UpdateSubjectInput!): UpdateSubjectResponse!
  updateSubjectsFromCsv: UpdateSubjectsFromCsvResponse!
  updateTag(id: Int!, input: UpdateTagInput!): UpdateTagResponse!
  updateTagsFromCsv: UpdateTagsFromCsvResponse!
}

type Order {
  createdAt: DateTime!
  id: ID!
  orderStatus: OrderStatus!
  products: [Product!]!
  shipToAddress: Address!
  updatedAt: DateTime!
  user: User!
}

# Order status
enum OrderStatus {
  FULFILLED
  PAID
  PLACED
  PROBLEM
  SHIPPED
}

type Photo {
  basePrice12: Float!
  basePrice16: Float!
  basePrice20: Float!
  basePrice24: Float!
  basePrice30: Float!
  collectionsForPhoto: [PhotoCollection!]
  createdAt: DateTime!
  description: String!
  favoritedByUsers: [UserFavorite!]
  id: ID!
  isFeatured: Boolean!
  isHidden: Boolean!
  isLimitedEdition: Boolean!
  location: Location

  # Primary image for the photo with a maximum dimension of 1,400px, saved to .webp format and converted to .jpeg for email sharing.
  photoImage: PhotoImage!
  photographer: Photographer
  priceModifier12: Float!
  priceModifier16: Float!
  priceModifier20: Float!
  priceModifier24: Float!
  priceModifier30: Float!
  printTypes: [String!]!
  products: [Product!]
  rating: Int!
  retailPrice12: Float!
  retailPrice16: Float!
  retailPrice20: Float!
  retailPrice24: Float!
  retailPrice30: Float!

  # A 1,200px x 630px image for sharing.
  shareImage: ShareImage
  sku: Int!
  sortIndex: Int!
  subjectsInPhoto: [PhotoSubject!]
  tagsForPhoto: [PhotoTag!]
  title: String!
  updatedAt: DateTime!
}

type PhotoCollection {
  collection: Collection!
  collectionId: Collection!
  photo: Photo!
  photoId: Photo!
}

type PhotoEditSelectionOptions {
  collections: [CollectionSelectionOption!]!
  locations: [LocationSelectionOption!]!
  photographers: [PhotographerSelectionOption!]!
  subjects: [SubjectSelectionOption!]!
  tags: [TagSelectionOption!]!
}

type PhotoImage {
  altText: String!
  aspectRatio: String
  createdAt: DateTime!
  height: Int!
  id: ID!
  imageName: String!
  isPanoramic: Boolean!
  isPortrait: Boolean!
  jpegUrl: String!
  size: String!
  updatedAt: DateTime!
  webpUrl: String!
  width: Int!
}

type PhotoSubject {
  photo: Photo!
  photoId: Photo!
  subject: Subject!
  subjectId: Subject!
}

type PhotoTag {
  photo: Photo!
  photoId: Photo!
  tag: Tag!
  tagId: Tag!
}

type PhotoWithFinishOptionsResponse {
  frames: [Frame!]
  mats: [Mat!]
  message: String!
  photo: Photo
  prints: [Print!]
  success: Boolean!
}

type Photographer {
  # The artist's biography.
  bio: String!

  # Count of photos attributed to the photographer on the site.
  countOfPhotos: Int!

  # The Image for the artist's portrait.
  coverImage: ProductImage

  # Date record was created.
  createdAt: DateTime!

  # The artist's email address.
  email: String!

  # The artist's first name.
  firstName: String!
  id: ID!

  # The artist's last name.
  lastName: String!

  # The artist's full name
  name: String!

  # Photos attributed to the artist.
  photos: [Photo!]

  # Date record was most recently updated.
  updatedAt: DateTime!
}

type PhotographerSelectionOption {
  id: Int!
  name: String!
}

type PhotographersResponse {
  photographers: [Photographer!]!
}

type Print {
  aspectRatio: String!
  basePrice: Float!
  cost: Float!
  createdAt: DateTime!
  description: String
  dimension1: Float!
  dimension2: Float!
  displayName: String!
  id: ID!
  priceModifier: Float!
  printSku: String!
  products: [Product!]
  retailPrice: Float!
  shippingCost: Float!
  type: String!
  updatedAt: DateTime!
}

input PrintsInput {
  aspectRatio: String!
  type: String!
}

type PrintsResponse {
  message: String!
  prints: [Print!]
  success: Boolean!
}

type Product {
  createdAt: DateTime!
  frame: Frame
  id: ID!
  mat: Mat
  order: Order!
  photo: Photo!
  print: Print!
  productSummary: String!
  shoppingBag: User
  totalRetailPrice: Float!
  updatedAt: DateTime!
}

type ProductImage {
  altText: String!
  aspectRatio: String
  createdAt: DateTime!
  fileExtension: String!

  # Optional. Product image for frames.
  frames: [Frame!]
  height: Int!
  id: ID!
  imageName: String!
  imageUrl: String!
  isPanoramic: Boolean!
  isPortrait: Boolean!

  # Optional. Product image for mats.
  mats: [Mat!]

  # Optional. Biographical image for photographer.
  photographers: [Photographer!]
  size: String!
  updatedAt: DateTime!
  width: Int!
}

type Query {
  allFeaturedPhotos: AllFeaturedPhotosResponse!
  allPhotosAtLocation(input: AllPhotosAtLocationInput!): AllPhotosAtLocationResponse!
  allPhotosByPhotographer(input: AllPhotosByPhotographerInput!): AllPhotosByPhotographerResponse!
  allPhotosInCollection(input: AllPhotosInCollectionInput!): AllPhotosInCollectionResponse!
  allPhotosOfSubject(input: AllPhotosOfSubjectInput!): AllPhotosOfSubjectResponse!
  allPhotosWithTag(input: AllPhotosWithTagInput!): AllPhotosWithTagResponse!
  collection(id: Int!): Collection
  collectionWithName(name: String!): Collection

  # Returns all Collections. Sortable and filterable.
  collections(input: CollectionSearchSortInput!): CollectionsResponse!

  # Returns all Photos favorited by the signed in User.
  favorites: FavoritesResponse!
  finishOptions(aspectRatio: String!): FinishOptions!
  frame(id: Int!): Frame!
  framesWithAspectRatio(aspectRatio: String!): [Frame!]!
  getUserPreferences: UserPreferencesResponse!
  location(id: Int!): Location
  locationWithName(name: String!): Location

  # Returns all Locations. Sortable and filterable.
  locations(input: LocationSearchSortInput!): LocationsResponse!
  mat(id: Int!): Mat!
  matsOfTypeAndSize(input: MatsInput!): MatsResponse!
  matsWithAspectRatio(aspectRatio: String!): [Mat!]!
  matsWithAspectRatioAndSize(aspectRatio: String!, size: Int!): [Mat!]!
  me: Int!
  newsletterSubscribers: [User!]!
  photo(id: Int!): Photo
  photoAndFinishOptionsForSku(sku: Int!): PhotoWithFinishOptionsResponse!
  photoEditOptions: PhotoEditSelectionOptions!
  photoImage(id: Int!): PhotoImage!
  photoImages: [PhotoImage!]!
  photoWithSku(sku: Int!): Photo!

  # Returns one Photographer + portrait, only or null, if no matching id is found. Meant to be used on the backend.
  photographer(id: Int!): Photographer

  # Returns one Photographer + portrait AND Photographer's Photos and related data. Meant to be used on the frontend. Used for the Photographer's Gallery.
  photographerWithName(name: String!): Photographer
  print(id: Int!): Print!
  printsOfTypeAndAspectRatio(input: PrintsInput!): PrintsResponse!
  product(id: Int!): Product
  productImage(id: Int!): ProductImage!
  productImages: [ProductImage!]!

  # Search collections
  searchCollections(input: SearchCollectionsInput!): SearchCollectionsResponse!

  # Search Frames. Returns Frame + product Image.
  searchFrames(input: SearchFramesInput!): SearchFramesResponse!
  searchImages(input: SearchProductImagesInput!): SearchProductImagesResponse!

  # Search locations
  searchLocations(input: SearchLocationsInput!): SearchLocationsResponse!

  # Search Mats. Returns Mat + Product Image.
  searchMats(input: SearchMatsInput!): SearchMatsResponse!
  searchPhotoImages(input: SearchShareImagesInput!): SearchShareImagesResponse!

  # Returns all Photographers + portraits, only. Meant to be used on the backend.
  searchPhotographers(input: SearchPhotographersInput!): SearchPhotographersResponse!

  # Returns all Photos + all relations. Searchable.
  searchPhotos(input: SearchPhotosInput!): SearchPhotosResponse!

  # Search Prints. Returns Print + Cover Image.
  searchPrints(input: SearchPrintsInput!): SearchPrintsResponse!

  # Search subjects.
  searchSubjects(input: SearchSubjectsInput!): SearchSubjectsResponse!

  # Search tags
  searchTags(input: SearchTagsInput!): SearchTagsResponse!
  shareImage(id: Int!): ShareImage!
  shareImages: [ShareImage!]!
  shoppingBagItems: ShoppingBagItemsResponse!

  # Returns all Photographers + portraits, only. Meant to be used on the backend.
  sortedPhotographers(asc: Boolean!, filter: String!, orderBy: String!): PhotographersResponse!
  subject(id: Int!): Subject
  subjectWithName(name: String!): Subject

  # Returns all Subjects. Sortable and filterable.
  subjects(input: SubjectSearchSortInput!): SubjectsResponse!
  tag(id: Int!): Tag
  tagWithName(name: String!): Tag

  # Returns all Tags. Sortable and filterable.
  tags(input: TagSearchSortInput!): TagsResponse!
  user(id: Int!): User!
  userSummaries: [User!]!
  users: [User!]!
}

type RemovePhotoFromFavoritesResponse {
  message: String!
  removedPhotoWithId: ID
  success: Boolean!
}

input SearchCollectionsInput {
  searchString: String!
}

type SearchCollectionsResponse {
  datalist: [Collection!]!
}

input SearchFramesInput {
  searchString: String!
}

type SearchFramesResponse {
  datalist: [Frame!]!
}

input SearchLocationsInput {
  searchString: String!
}

type SearchLocationsResponse {
  datalist: [Location!]!
}

input SearchMatsInput {
  searchString: String!
}

type SearchMatsResponse {
  datalist: [Mat!]!
}

input SearchPhotoImagesInput {
  searchString: String!
}

type SearchPhotoImagesResponse {
  datalist: [PhotoImage!]!
}

input SearchPhotographersInput {
  searchString: String!
}

type SearchPhotographersResponse {
  datalist: [Photographer!]!
}

input SearchPhotosInput {
  searchString: String!
}

type SearchPhotosResponse {
  datalist: [Photo!]!
}

input SearchPrintsInput {
  searchString: String!
}

type SearchPrintsResponse {
  datalist: [Print!]!
}

input SearchProductImagesInput {
  searchString: String!
}

type SearchProductImagesResponse {
  datalist: [ProductImage!]!
}

input SearchShareImagesInput {
  searchString: String!
}

type SearchShareImagesResponse {
  datalist: [ShareImage!]!
}

input SearchSubjectsInput {
  searchString: String!
}

type SearchSubjectsResponse {
  datalist: [Subject!]!
}

input SearchTagsInput {
  searchString: String!
}

type SearchTagsResponse {
  datalist: [Tag!]!
}

type SelectionOption {
  id: Int!
  name: String!
}

type ShareImage {
  altText: String!
  aspectRatio: String
  createdAt: DateTime!
  fileExtension: String!
  height: Int!
  id: ID!
  imageName: String!
  imageUrl: String!
  isPanoramic: Boolean!
  isPortrait: Boolean!
  size: String!
  updatedAt: DateTime!
  width: Int!
}

type ShoppingBagItemsResponse {
  # Returns list of Products in user's shopping bag.
  dataList: [Product!]
}

# Sort direction
enum SortDirection {
  ASC
  DESC
}

type Subject {
  # Count of photos of the subject on the site.
  countOfPhotos: Int!
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  photosOfSubject: [PhotoSubject!]
  sortIndex: Float!
  updatedAt: DateTime!
}

input SubjectSearchSortInput {
  direction: SortDirection = ASC
  filter: String
  orderBy: String = "name"
}

type SubjectSelectionOption {
  id: Int!
  name: String!
}

type SubjectsResponse {
  subjects: [Subject!]!
}

type SuccessMessageResponse {
  message: String!
  success: Boolean!
}

type Tag {
  # Count of photos of the tag on the site.
  countOfPhotos: Int!
  createdAt: DateTime!

  # Optional. A description of the tag used in connection with the vignette at the top of the Tag's photo page.
  description: String!
  id: ID!

  # The name of the tag.
  name: String!

  # A connection through a join table to the photos tagged with the tag.
  photosWithTag: [PhotoTag!]
  sortIndex: Int!
  updatedAt: DateTime!
}

input TagSearchSortInput {
  direction: SortDirection = ASC
  filter: String
  orderBy: String = "name"
}

type TagSelectionOption {
  id: Int!
  name: String!
}

type TagsResponse {
  tags: [Tag!]!
}

# Optional inputs to be used to update the Collection Info.
input UpdateCollectionInput {
  # Optional. A vignette used to introduce the collection.
  description: String

  # Optional. Name of the collection. Used in Photo Info links.
  name: String

  # An index used to sort the collections.
  sortIndex: Float
}

type UpdateCollectionResponse {
  message: String!
  success: Boolean!
  updatedCollection: Collection
}

type UpdateCollectionsFromCsvResponse {
  inserted: Int
  message: String!
  success: Boolean!
  updated: Int
}

input UpdateFrameInput {
  basePrice: Float
  color: String
  cost: Float
  description: String
  dimension1: Float
  dimension2: Float
  displayName: String
  frameSku: String
  material: String
  priceModifier: Float
  printType: String
  productImageId: Float
  sortIndex: Float
}

type UpdateFrameResponse {
  message: String!
  success: Boolean!
  updatedFrame: Frame
}

type UpdateFramesFromCsvResponse {
  inserted: Int!
  message: String!
  success: Boolean!
  updated: Int!
}

# Optional inputs to be used to update the Location Info.
input UpdateLocationInput {
  # Optional. A vignette used to introduce the location.
  description: String

  # Optional. Name of the location. Used in Photo Info links.
  name: String

  # An index used to sort the locations.
  sortIndex: Float

  # An optional string that can be used to refer to the location.
  tag: String
}

type UpdateLocationResponse {
  message: String!
  success: Boolean!
  updatedLocation: Location
}

type UpdateLocationsFromCsvResponse {
  inserted: Int
  message: String!
  success: Boolean!
  updated: Int
}

input UpdateMatInput {
  basePrice: Float
  color: String
  cost: Float
  description: String
  dimension1: Float
  dimension2: Float
  displayName: String
  matSku: String
  name: String
  priceModifier: Float
  printType: String
  productImageId: Float
  shippingCost: Float
}

type UpdateMatResponse {
  message: String!
  success: Boolean!
  updatedMat: Mat
}

type UpdateMatsFromCsvResponse {
  inserted: Int
  message: String!
  success: Boolean!
  updated: Int
}

input UpdatePhotoImageInput {
  altText: String
  fileExtension: String
  height: Int
  imageName: String
  jpegUrl: String
  size: String
  webpUrl: String
  width: Int
}

type UpdatePhotoImageResponse {
  message: String!
  success: Boolean!
  updatedPhotoImage: PhotoImage
}

type UpdatePhotoImagesFromCsvResponse {
  inserted: Int
  message: String!
  success: Boolean!
  updated: Int
}

input UpdatePhotoInput {
  basePrice12: Float = 100
  basePrice16: Float = 140
  basePrice20: Float = 180
  basePrice24: Float = 230
  basePrice30: Float = 275
  collectionIds: [Int!]
  description: String
  isFeatured: Boolean
  isHidden: Boolean
  isLimitedEdition: Boolean
  locationId: Int
  photoImageId: Int
  photographerId: Int
  priceModifier12: Float = 1
  priceModifier16: Float = 1
  priceModifier20: Float = 1
  priceModifier24: Float = 1
  priceModifier30: Float = 1
  rating: Int
  shareImageId: Int
  subjectIds: [Int!]
  tagIds: [Int!]
  title: String
}

type UpdatePhotoResponse {
  message: String!
  success: Boolean!
  updatedPhoto: Photo
}

# Inputs to update a Photographer entity.
input UpdatePhotographerInput {
  # Optional: Short biography for Photographer. Displayed at the top of the Photographer's photo gallery.
  bio: String

  # id for cover image.
  coverImageId: Int

  # Optional: Photographer's email address.
  email: String

  # Optional: Photographer's first name.
  firstName: String

  # Optional: Photographer's last name.
  lastName: String

  # Optional: Photographer's full name.
  name: String
}

type UpdatePhotographerResponse {
  message: String!
  success: Boolean!
  updatedPhotographer: Photographer
}

type UpdatePhotographersFromCsvResponse {
  inserted: Int
  message: String!
  success: Boolean!
  updated: Int
}

type UpdatePhotosFromCsvResponse {
  deleted: Int
  inserted: Int
  message: String!
  success: Boolean!
  updated: Int
}

input UpdatePrintInput {
  basePrice: Float
  cost: Float
  coverImageId: Float
  description: String
  dimension1: Float
  dimension2: Float
  displayName: String
  priceModifier: Float
  printSku: String
  shippingCost: Float
  type: String
}

type UpdatePrintResponse {
  message: String!
  success: Boolean!
  updatedPrint: Print
}

type UpdatePrintsFromCsvResponse {
  inserted: Int!
  success: Boolean!
  updated: Int!
}

input UpdateProductImageInput {
  altText: String
  fileExtension: String
  height: Int
  imageName: String
  imageUrl: String
  size: String
  width: Int
}

type UpdateProductImageResponse {
  message: String!
  success: Boolean!
  updatedProductImage: ProductImage
}

type UpdateProductImagesFromCsvResponse {
  inserted: Int!
  success: Boolean!
  updated: Int!
}

input UpdateProductInput {
  frameId: Int
  matId: Int
  photoId: Int
  printId: Int
}

type UpdateProductResponse {
  message: String!
  success: Boolean!
  updatedProduct: Product
}

input UpdateShareImageInput {
  altText: String
  fileExtension: String
  height: Int
  id: Float
  imageName: String
  imageUrl: String
  size: String
  width: Int
}

type UpdateShareImageResponse {
  message: String!
  success: Boolean!
  updatedShareImage: ShareImage
}

type UpdateShareImagesFromCsvResponse {
  deleted: Int
  inserted: Int
  message: String!
  success: Boolean!
  updated: Int
}

# Optional inputs to be used to update the Subject Info.
input UpdateSubjectInput {
  # Optional. A cover image to be displayed next to the opening vignette.
  coverImageId: Float

  # Optional. A vignette used to introduce the subject.
  description: String

  # Optional. Name of the subject. Used in Photo Info links.
  name: String

  # An index used to sort the subjects.
  sortIndex: Float
}

type UpdateSubjectResponse {
  message: String!
  success: Boolean!
  updatedSubject: Subject
}

type UpdateSubjectsFromCsvResponse {
  inserted: Int
  message: String!
  success: Boolean!
  updated: Int
}

# Optional inputs to be used to update the Tag Info.
input UpdateTagInput {
  # Optional. A vignette used to introduce the tag.
  description: String

  # Optional. Name of the tag. Used in Photo Info links.
  name: String

  # An index used to sort the tags.
  sortIndex: Float
}

type UpdateTagResponse {
  message: String!
  success: Boolean!
  updatedTag: Tag
}

type UpdateTagsFromCsvResponse {
  inserted: Int
  message: String!
  success: Boolean!
  updated: Int
}

type User {
  createdAt: DateTime!
  email: String!
  emailVerified: DateTime
  id: ID!
  image: String
  isSubscribed: Boolean!
  name: String!
  orders: [Order!]!
  roles: [String!]!
  shoppingBagItems: [Product!]
  updatedAt: DateTime!
  userFavorites: [UserFavorite!]!
}

type UserFavorite {
  photo: Photo!
  photoId: Photo!
  user: User!
  userId: User!
}

type UserPreferencesResponse {
  favorites: [UserFavorite!]
  shoppingBagItems: [Product!]
}

type addProductImageToFrameResponse {
  frame: Frame
  message: String!
  productImage: ProductImage
  success: Boolean!
}

type addProductImageToMatResponse {
  mat: Mat
  message: String!
  productImage: ProductImage
  success: Boolean!
}
